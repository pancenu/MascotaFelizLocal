/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import clases.*;
import controlador.*;
import java.awt.BorderLayout;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
//import static org.apache.maven.shared.utils.StringUtils.left;

/**
 *
 * @author leonardo
 */

public class VistaGlobal extends javax.swing.JFrame {
    CtCliente CtCliente;
    CtMascota CtMascota;
    CtPlan CtPlan;
    CtPago CtPago;
    List ListaIdClientes;
    List ListaIdMascotas;
    List ListaIdPlanes;
    
    /**
     * Creates new form VistaGlobal
     */
    public VistaGlobal() {
        this.initComponents();
        this.CtCliente= new CtCliente();
        this.CtMascota= new CtMascota();    
        this.CtPlan = new CtPlan();
        this.CtPago = new CtPago();
        this.ListaIdClientes = new ArrayList();
        this.ListaIdMascotas = new ArrayList();
        this.ListaIdPlanes = new ArrayList();
        this.SetListaClientes();
        this.SetListaMascotas();
        this.SetListaPlanes();
        this.UpdateGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLabel = new javax.swing.JLabel();
        Panel = new javax.swing.JTabbedPane();
        ClientePanel = new javax.swing.JPanel();
        IdentificacionLabel = new javax.swing.JLabel();
        IdentificacionCliente = new javax.swing.JTextField();
        NombresLabel = new javax.swing.JLabel();
        NombresCliente = new javax.swing.JTextField();
        ApellidosLabel = new javax.swing.JLabel();
        ApellidosCliente = new javax.swing.JTextField();
        DireccionLabel = new javax.swing.JLabel();
        DireccionCliente = new javax.swing.JTextField();
        TelefonoLabel = new javax.swing.JLabel();
        TelefonoCliente = new javax.swing.JTextField();
        CrearClienteButton = new javax.swing.JButton();
        ConsultarClienteButton = new javax.swing.JButton();
        ModificarClienteButton = new javax.swing.JButton();
        BorrarClienteButton = new javax.swing.JButton();
        LimpiarClienteButton = new javax.swing.JButton();
        MascotaPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ClienteBox = new javax.swing.JComboBox<>();
        Especie = new javax.swing.JComboBox<>();
        Peso = new javax.swing.JTextField();
        AnioNace = new javax.swing.JTextField();
        NombreMascota = new javax.swing.JTextField();
        CodigoMascota = new javax.swing.JTextField();
        CrearMascotaButton = new javax.swing.JButton();
        ConsultarMascotaButton = new javax.swing.JButton();
        ModificarMascotaButton = new javax.swing.JButton();
        BorrarMascotaButton = new javax.swing.JButton();
        LimpiarMascotaButton = new javax.swing.JButton();
        Pagos = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        NumeroCuotas = new javax.swing.JTextField();
        MascotaBox = new javax.swing.JComboBox<>();
        PlanBox = new javax.swing.JComboBox<>();
        FechaPago = new javax.swing.JFormattedTextField();
        CrearPagoButton = new javax.swing.JButton();
        ConsultarPagoButton = new javax.swing.JButton();
        ModificarPagoButton = new javax.swing.JButton();
        BorrarPagoButton = new javax.swing.JButton();
        LimpiarPagoButton = new javax.swing.JButton();
        IdPago = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        PlanPanel = new javax.swing.JPanel();
        CodigoPlan = new javax.swing.JTextField();
        PrecioPlan = new javax.swing.JTextField();
        NombrePlan = new javax.swing.JComboBox<>();
        CodigoLabel = new javax.swing.JLabel();
        NombreLabel = new javax.swing.JLabel();
        PrecioLabel = new javax.swing.JLabel();
        CrearPlanButton = new javax.swing.JButton();
        ConsultarPlanButton = new javax.swing.JButton();
        ModificarPlanButton = new javax.swing.JButton();
        BorrarPlanButton = new javax.swing.JButton();
        LimpiarPlanButton = new javax.swing.JButton();
        Reporte = new javax.swing.JPanel();
        ScrollReporte = new javax.swing.JScrollPane();
        ReporteTabla = new javax.swing.JTable();
        ActualizarReporte = new javax.swing.JButton();
        ExportarReporte = new javax.swing.JButton();
        DistribucionPlanes = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TitleLabel.setFont(new java.awt.Font("Open Sans Extrabold", 0, 36)); // NOI18N
        TitleLabel.setText("MASCOTA FELIZ");
        TitleLabel.setName("TittleLabel"); // NOI18N

        IdentificacionLabel.setText("Identificacion");

        IdentificacionCliente.setMinimumSize(new java.awt.Dimension(128, 26));
        IdentificacionCliente.setName(""); // NOI18N

        NombresLabel.setText("Nombres");

        ApellidosLabel.setText("Apellidos");

        DireccionLabel.setText("Direccion");

        TelefonoLabel.setText("Telefono");

        TelefonoCliente.setVerifyInputWhenFocusTarget(false);

        CrearClienteButton.setText("Crear");
        CrearClienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearClienteButtonActionPerformed(evt);
            }
        });

        ConsultarClienteButton.setText("Consultar");
        ConsultarClienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarClienteButtonActionPerformed(evt);
            }
        });

        ModificarClienteButton.setText("Modificar");
        ModificarClienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarClienteButtonActionPerformed(evt);
            }
        });

        BorrarClienteButton.setText("Borrar");
        BorrarClienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarClienteButtonActionPerformed(evt);
            }
        });

        LimpiarClienteButton.setText("Limpiar");
        LimpiarClienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarClienteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClientePanelLayout = new javax.swing.GroupLayout(ClientePanel);
        ClientePanel.setLayout(ClientePanelLayout);
        ClientePanelLayout.setHorizontalGroup(
            ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClientePanelLayout.createSequentialGroup()
                        .addComponent(CrearClienteButton)
                        .addGap(18, 18, 18)
                        .addComponent(ConsultarClienteButton)
                        .addGap(18, 18, 18)
                        .addComponent(ModificarClienteButton)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarClienteButton)
                        .addGap(18, 18, 18)
                        .addComponent(LimpiarClienteButton)
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(ClientePanelLayout.createSequentialGroup()
                        .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ClientePanelLayout.createSequentialGroup()
                                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(IdentificacionLabel)
                                    .addComponent(NombresLabel)
                                    .addComponent(ApellidosLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(IdentificacionCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NombresCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ApellidosCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClientePanelLayout.createSequentialGroup()
                                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DireccionLabel)
                                    .addComponent(TelefonoLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DireccionCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TelefonoCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
        );
        ClientePanelLayout.setVerticalGroup(
            ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IdentificacionLabel)
                    .addComponent(IdentificacionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombresLabel)
                    .addComponent(NombresCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ApellidosLabel)
                    .addComponent(ApellidosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DireccionLabel)
                    .addComponent(DireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TelefonoLabel)
                    .addComponent(TelefonoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addGroup(ClientePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CrearClienteButton)
                    .addComponent(ConsultarClienteButton)
                    .addComponent(ModificarClienteButton)
                    .addComponent(LimpiarClienteButton)
                    .addComponent(BorrarClienteButton)))
        );

        Panel.addTab("Cliente", ClientePanel);

        jLabel1.setText("Código");

        jLabel2.setText("Nombre");

        jLabel3.setText("Año nacimiento");

        jLabel4.setText("Peso");

        jLabel5.setText("Especie");

        jLabel6.setText("Cliente");

        ClienteBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ClienteBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ClienteBoxFocusGained(evt);
            }
        });

        Especie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Canino", "Felino" }));

        CrearMascotaButton.setText("Crear");
        CrearMascotaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearMascotaButtonActionPerformed(evt);
            }
        });

        ConsultarMascotaButton.setText("Consultar");
        ConsultarMascotaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarMascotaButtonActionPerformed(evt);
            }
        });

        ModificarMascotaButton.setText("Modificar");
        ModificarMascotaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarMascotaButtonActionPerformed(evt);
            }
        });

        BorrarMascotaButton.setText("Borrar");
        BorrarMascotaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarMascotaButtonActionPerformed(evt);
            }
        });

        LimpiarMascotaButton.setText("Limpiar");
        LimpiarMascotaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarMascotaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MascotaPanelLayout = new javax.swing.GroupLayout(MascotaPanel);
        MascotaPanel.setLayout(MascotaPanelLayout);
        MascotaPanelLayout.setHorizontalGroup(
            MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MascotaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MascotaPanelLayout.createSequentialGroup()
                        .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CodigoMascota)
                            .addComponent(ClienteBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(NombreMascota, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AnioNace, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Peso)
                            .addComponent(Especie, javax.swing.GroupLayout.Alignment.TRAILING, 0, 160, Short.MAX_VALUE)))
                    .addGroup(MascotaPanelLayout.createSequentialGroup()
                        .addComponent(CrearMascotaButton)
                        .addGap(18, 18, 18)
                        .addComponent(ConsultarMascotaButton)
                        .addGap(18, 18, 18)
                        .addComponent(ModificarMascotaButton)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarMascotaButton)
                        .addGap(18, 18, 18)
                        .addComponent(LimpiarMascotaButton)
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );
        MascotaPanelLayout.setVerticalGroup(
            MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MascotaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CodigoMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(NombreMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AnioNace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Peso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Especie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ClienteBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addGroup(MascotaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CrearMascotaButton)
                    .addComponent(ConsultarMascotaButton)
                    .addComponent(ModificarMascotaButton)
                    .addComponent(LimpiarMascotaButton)
                    .addComponent(BorrarMascotaButton)))
        );

        Panel.addTab("Mascota", MascotaPanel);

        jLabel7.setText("Fecha");

        jLabel8.setText("Número de cuotas");

        jLabel9.setText("Mascota");

        jLabel10.setText("Plan");

        MascotaBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        PlanBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        FechaPago.setText("aaaa/mm/dd");

        CrearPagoButton.setText("Crear");
        CrearPagoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearPagoButtonActionPerformed(evt);
            }
        });

        ConsultarPagoButton.setText("Consultar");
        ConsultarPagoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarPagoButtonActionPerformed(evt);
            }
        });

        ModificarPagoButton.setText("Modificar");
        ModificarPagoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarPagoButtonActionPerformed(evt);
            }
        });

        BorrarPagoButton.setText("Borrar");
        BorrarPagoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarPagoButtonActionPerformed(evt);
            }
        });

        LimpiarPagoButton.setText("Limpiar");
        LimpiarPagoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarPagoButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("IdPago");

        javax.swing.GroupLayout PagosLayout = new javax.swing.GroupLayout(Pagos);
        Pagos.setLayout(PagosLayout);
        PagosLayout.setHorizontalGroup(
            PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PagosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PagosLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PagosLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PlanBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PagosLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NumeroCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PagosLayout.createSequentialGroup()
                        .addComponent(CrearPagoButton)
                        .addGap(18, 18, 18)
                        .addComponent(ConsultarPagoButton)
                        .addGap(18, 18, 18)
                        .addComponent(ModificarPagoButton)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarPagoButton)
                        .addGap(18, 18, 18)
                        .addComponent(LimpiarPagoButton)
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addGroup(PagosLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MascotaBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PagosLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(IdPago, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)))
                .addContainerGap())
        );
        PagosLayout.setVerticalGroup(
            PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PagosLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(FechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NumeroCuotas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(MascotaBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(PlanBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IdPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addGroup(PagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CrearPagoButton)
                    .addComponent(ConsultarPagoButton)
                    .addComponent(ModificarPagoButton)
                    .addComponent(LimpiarPagoButton)
                    .addComponent(BorrarPagoButton)))
        );

        Panel.addTab("Pagos", Pagos);

        CodigoPlan.setName("CodigoPlan"); // NOI18N

        PrecioPlan.setName("PrecioPlan"); // NOI18N

        NombrePlan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bienestar", "Élite", "Diamante" }));

        CodigoLabel.setText("Código");

        NombreLabel.setText("Nombre");

        PrecioLabel.setText("Precio");

        CrearPlanButton.setText("Crear");
        CrearPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearPlanButtonActionPerformed(evt);
            }
        });

        ConsultarPlanButton.setText("Consultar");
        ConsultarPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarPlanButtonActionPerformed(evt);
            }
        });

        ModificarPlanButton.setText("Modificar");
        ModificarPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarPlanButtonActionPerformed(evt);
            }
        });

        BorrarPlanButton.setText("Borrar");
        BorrarPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarPlanButtonActionPerformed(evt);
            }
        });

        LimpiarPlanButton.setText("Limpiar");
        LimpiarPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarPlanButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PlanPanelLayout = new javax.swing.GroupLayout(PlanPanel);
        PlanPanel.setLayout(PlanPanelLayout);
        PlanPanelLayout.setHorizontalGroup(
            PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlanPanelLayout.createSequentialGroup()
                        .addGroup(PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CodigoLabel)
                            .addComponent(NombreLabel)
                            .addComponent(PrecioLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PrecioPlan)
                            .addComponent(NombrePlan, 0, 160, Short.MAX_VALUE)
                            .addComponent(CodigoPlan)))
                    .addGroup(PlanPanelLayout.createSequentialGroup()
                        .addComponent(CrearPlanButton)
                        .addGap(18, 18, 18)
                        .addComponent(ConsultarPlanButton)
                        .addGap(18, 18, 18)
                        .addComponent(ModificarPlanButton)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarPlanButton)
                        .addGap(18, 18, 18)
                        .addComponent(LimpiarPlanButton)
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PlanPanelLayout.setVerticalGroup(
            PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CodigoPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CodigoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombrePlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NombreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PrecioPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PrecioLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                .addGroup(PlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CrearPlanButton)
                    .addComponent(ConsultarPlanButton)
                    .addComponent(ModificarPlanButton)
                    .addComponent(BorrarPlanButton)
                    .addComponent(LimpiarPlanButton)))
        );

        Panel.addTab("Plan", PlanPanel);

        ScrollReporte.setPreferredSize(new java.awt.Dimension(452, 100));

        ReporteTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha pago", "Número cuotas", "Mascota", "Plan", "Cliente"
            }
        ));
        ScrollReporte.setViewportView(ReporteTabla);

        ActualizarReporte.setText("Actualizar");
        ActualizarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarReporteActionPerformed(evt);
            }
        });

        ExportarReporte.setText("Exportar");
        ExportarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportarReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReporteLayout = new javax.swing.GroupLayout(Reporte);
        Reporte.setLayout(ReporteLayout);
        ReporteLayout.setHorizontalGroup(
            ReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReporteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ActualizarReporte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 309, Short.MAX_VALUE)
                .addComponent(ExportarReporte)
                .addContainerGap())
            .addGroup(ReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(ScrollReporte, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
        );
        ReporteLayout.setVerticalGroup(
            ReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReporteLayout.createSequentialGroup()
                .addGap(0, 307, Short.MAX_VALUE)
                .addGroup(ReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ActualizarReporte)
                    .addComponent(ExportarReporte)))
            .addGroup(ReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ReporteLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(ScrollReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(37, Short.MAX_VALUE)))
        );

        Panel.addTab("Reporte", Reporte);

        javax.swing.GroupLayout DistribucionPlanesLayout = new javax.swing.GroupLayout(DistribucionPlanes);
        DistribucionPlanes.setLayout(DistribucionPlanesLayout);
        DistribucionPlanesLayout.setHorizontalGroup(
            DistribucionPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 505, Short.MAX_VALUE)
        );
        DistribucionPlanesLayout.setVerticalGroup(
            DistribucionPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );

        Panel.addTab("Distribucion Planes", DistribucionPlanes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TitleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CrearClienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearClienteButtonActionPerformed
        // TODO add your handling code here:
        String identificacion = IdentificacionCliente.getText();
        String nombres = NombresCliente.getText();
        String apellidos = ApellidosCliente.getText();
        String direccion = DireccionCliente.getText();
        String telefono = TelefonoCliente.getText();
        Cliente c = new Cliente(identificacion, nombres, apellidos, 
                direccion, telefono );
        if (this.CtCliente.crearCliente(c)) {
            JOptionPane.showMessageDialog(this, 
                    "El cliente fue agregado en la base de datos");
        } else {
            JOptionPane.showMessageDialog(this, 
                    "No se pudo agregar el registro a la base de datos");
        }
        limpiarCamposCliente();
        SetListaClientes();
    }//GEN-LAST:event_CrearClienteButtonActionPerformed

    private void ConsultarClienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarClienteButtonActionPerformed
        // TODO add your handling code here:
        String identificacion = IdentificacionCliente.getText();
        Cliente c = CtCliente.buscarCliente(identificacion);
        if (c == null) {
            JOptionPane.showMessageDialog(this, 
                "La identifiacion de ese cliente no fue encontrada");
            limpiarCamposCliente();
        } else {
        NombresCliente.setText(c.getNombres());
        ApellidosCliente.setText(c.getApellidos());
        DireccionCliente.setText(c.getDireccion());
        TelefonoCliente.setText(c.getTelefono());    
        }       
    }//GEN-LAST:event_ConsultarClienteButtonActionPerformed

    private void ModificarClienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarClienteButtonActionPerformed
        // TODO add your handling code here:
        String identificacion = IdentificacionCliente.getText();
        String nombres = NombresCliente.getText();
        String apellidos = ApellidosCliente.getText();
        String direccion = DireccionCliente.getText();
        String telefono = TelefonoCliente.getText();
        Cliente c = new Cliente(identificacion, nombres, apellidos,
                direccion, telefono);
        try{
            boolean respuesta = CtCliente.actualizarCliente(c);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro actualizado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Registro no actualizado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, 
                    "Debe buscar el registro para actualizar");
        }
        limpiarCamposCliente();
    }//GEN-LAST:event_ModificarClienteButtonActionPerformed

    private void LimpiarClienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarClienteButtonActionPerformed
        // TODO add your handling code here:
        limpiarCamposCliente();
    }//GEN-LAST:event_LimpiarClienteButtonActionPerformed

    private void CrearPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearPlanButtonActionPerformed
        // TODO add your handling code here:
        String codigo = CodigoPlan.getText();
        String nombre = NombrePlan.getSelectedItem().toString();
        int precio = Integer.parseInt(PrecioPlan.getText());
        Plan p = new Plan(codigo, nombre, precio);

        if (this.CtPlan.crearPlan(p)) {
            JOptionPane.showMessageDialog(this, 
                    "El plan fue agregado en la base de datos");
        } else {
            JOptionPane.showMessageDialog(this, 
                    "No se pudo agregar el registro a la base de datos");
        }
        limpiarCamposPlan();
        SetListaPlanes();
    }//GEN-LAST:event_CrearPlanButtonActionPerformed

    private void ConsultarPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarPlanButtonActionPerformed
        // TODO add your handling code here:
        String codigo = CodigoPlan.getText();
        Plan p = CtPlan.buscarPlan(codigo);
        if (p == null) {
            JOptionPane.showMessageDialog(this, 
                    "El código de ese plan no fue encontrado");
            limpiarCamposPlan();
        } else {
            if (p.getNombre().equals("Bienestar")) {
                NombrePlan.setSelectedIndex(0);
            } else {
                if (p.getNombre().equals("Élite")) {
                    NombrePlan.setSelectedIndex(1);
                } else {
                    NombrePlan.setSelectedIndex(2);
                }
            }
            PrecioPlan.setText(String.valueOf(p.getPrecio()));
        }
    }//GEN-LAST:event_ConsultarPlanButtonActionPerformed

    private void ModificarPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarPlanButtonActionPerformed
        // TODO add your handling code here:
        String codigo = CodigoPlan.getText();
        String nombre = NombrePlan.getSelectedItem().toString();
        int precio = Integer.parseInt(PrecioPlan.getText());
        Plan p = new Plan(codigo, nombre, precio);
        try{
            boolean respuesta = CtPlan.actualizarPlan(p);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro actualizado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Registro no actualizado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "Debe buscar el registro para actualizar");
        }
        limpiarCamposPlan();
    }//GEN-LAST:event_ModificarPlanButtonActionPerformed

    private void BorrarPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarPlanButtonActionPerformed
        // TODO add your handling code here:
        String codigo = CodigoPlan.getText();
        String nombre = NombrePlan.getSelectedItem().toString();
        int precio = Integer.parseInt(PrecioPlan.getText());
        Plan p = new Plan(codigo, nombre, precio);
        try{
            boolean respuesta = CtPlan.borrarPlan(p);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro borrado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, "Registro no borrado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarCamposPlan();
    }//GEN-LAST:event_BorrarPlanButtonActionPerformed

    private void LimpiarPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarPlanButtonActionPerformed
        // TODO add your handling code here:
        limpiarCamposPlan();
    }//GEN-LAST:event_LimpiarPlanButtonActionPerformed

    private void BorrarClienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarClienteButtonActionPerformed
        // TODO add your handling code here:
        String identificacion = IdentificacionCliente.getText();
        String nombres = "";
        String apellidos = "";
        String direccion = "";
        String telefono = "";
        Cliente c = new Cliente(identificacion, nombres, apellidos, 
                direccion, telefono );
        try{
            boolean respuesta = CtCliente.borrarCliente(c);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro borrado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Registro no borrado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarCamposCliente();
    }//GEN-LAST:event_BorrarClienteButtonActionPerformed

    private void ClienteBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ClienteBoxFocusGained
        // TODO add your handling code here:
    
    }//GEN-LAST:event_ClienteBoxFocusGained

    private void CrearMascotaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearMascotaButtonActionPerformed
        // TODO add your handling code here:
        
        String codigo = CodigoMascota.getText();
        String nombre = NombreMascota.getText();
                //.getSelectedItem().toString();
        int anioNace = Integer.parseInt(AnioNace.getText());
        float peso = Float.parseFloat(Peso.getText());
        String especie = Especie.getSelectedItem().toString();
        
        int idCliente=Integer.valueOf(ListaIdClientes.get(
                ClienteBox.getSelectedIndex()).toString());
        /*
        String cliente = ClienteBox.getSelectedItem().toString();
        String identificacion = cliente.split(",")[0];
        int idCliente = CtCliente.CatchIdCliente(identificacion);
        */
        Mascota m = new Mascota(codigo, nombre, anioNace, 
                peso,especie, idCliente);

        if ( CtMascota.crearMascota(m) ) {
            JOptionPane.showMessageDialog(this, 
                    "El plan fue agregado en la base de datos");
        } else {
            JOptionPane.showMessageDialog(this, 
                    "No se pudo agregar el registro a la base de datos");
        }
        limpiarCamposMascota();
        SetListaMascotas();
    }//GEN-LAST:event_CrearMascotaButtonActionPerformed

    private void ConsultarMascotaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarMascotaButtonActionPerformed
        // TODO add your handling code here:
        
        String codigo = CodigoMascota.getText();
        Mascota m = CtMascota.buscarMascota(codigo);
        
        if (m == null) {
            JOptionPane.showMessageDialog(this, 
                    "El código de ese plan no fue encontrado");
            limpiarCamposMascota();
        } else {
            NombreMascota.setText(m.getNombre());
            AnioNace.setText(String.valueOf(m.getAnioNace() ));
            Peso.setText(String.valueOf( m.getPeso() ));
            if (m.getEspecie().equals("Canino")) {
                Especie.setSelectedIndex(0);
            } else {
                if (m.getEspecie().equals("Felino")) {
                    Especie.setSelectedIndex(1);
                } 
            }
            //int idCliente = m.getIdCliente();
            //int idCliente = CtCliente.CatchIdCliente(identificacion);
            
            ClienteBox.setSelectedIndex(ListaIdClientes.indexOf(m.getIdCliente()));
        }
        
    }//GEN-LAST:event_ConsultarMascotaButtonActionPerformed

    private void ModificarMascotaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarMascotaButtonActionPerformed
        // TODO add your handling code here:
        String codigo = CodigoMascota.getText();
        String nombre = NombreMascota.getText();
                //.getSelectedItem().toString();
        int anio = Integer.parseInt(AnioNace.getText());
        float peso = Float.valueOf(Peso.getText());
        String especie;
        if (Especie.getSelectedIndex()==0){
            especie = "Canino";
        } else {
            especie = "Felino";
        }
        
        /*
        int idCliente;
        String identificacion;
        identificacion =  ClienteBox.getSelectedItem().toString();
        int sz=identificacion.indexOf(",");
        identificacion = left(identificacion,sz);
        idCliente = CtCliente.CatchIdCliente(identificacion);
        */
        
        int idCliente=Integer.valueOf(ListaIdClientes.get(
                ClienteBox.getSelectedIndex()).toString());
        
        Mascota m = new Mascota(codigo, nombre, anio, peso, especie, idCliente);
        try{
            boolean respuesta = this.CtMascota.actualizarMascota(m);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro actualizado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Registro no actualizado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "Debe buscar el registro para actualizar");
        }
        limpiarCamposMascota();    
       
    }//GEN-LAST:event_ModificarMascotaButtonActionPerformed

    private void BorrarMascotaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarMascotaButtonActionPerformed
        // TODO add your handling code here:
        String codigo = CodigoMascota.getText();
        String nombre = NombreMascota.getText();
        int anio = Integer.parseInt(AnioNace.getText());
        Float peso = Float.valueOf(Peso.getText() );
        String especie = Especie.getSelectedItem().toString();
        int idCliente=Integer.valueOf(ListaIdClientes.get(
                ClienteBox.getSelectedIndex()).toString());
        Mascota m = new Mascota(codigo, nombre, anio, peso, especie, idCliente);
        try{
            boolean respuesta = CtMascota.borrarMascota(m);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro borrado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Registro no borrado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarCamposCliente();
    }//GEN-LAST:event_BorrarMascotaButtonActionPerformed

    private void LimpiarMascotaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarMascotaButtonActionPerformed
        // TODO add your handling code here:
        limpiarCamposMascota();
    }//GEN-LAST:event_LimpiarMascotaButtonActionPerformed

    private void CrearPagoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearPagoButtonActionPerformed
        // TODO add your handling code here:
        String fechaPago = FechaPago.getText();
        int numeroCuotas = Integer.parseInt(NumeroCuotas.getText());
                //.getSelectedItem().toString();
        int idMascota = Integer.valueOf(ListaIdMascotas.get(
                MascotaBox.getSelectedIndex()).toString());
        int idPlan = Integer.valueOf(ListaIdPlanes.get(
                PlanBox.getSelectedIndex()).toString());

        Pago pg = new Pago(fechaPago, numeroCuotas, idMascota, idPlan);

        if ( CtPago.crearPago(pg) ) {
            JOptionPane.showMessageDialog(this, 
                    "El plan fue agregado en la base de datos");
        } else {
            JOptionPane.showMessageDialog(this, 
                    "No se pudo agregar el registro a la base de datos");
        }
//        SetListaPagos();
        limpiarCamposPago();        
    }//GEN-LAST:event_CrearPagoButtonActionPerformed

    private void ConsultarPagoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarPagoButtonActionPerformed
        // TODO add your handling code here:
        int idPago = Integer.parseInt(IdPago.getText());
        Pago pg = CtPago.buscarPago(idPago);
        
        if (pg == null) {
            JOptionPane.showMessageDialog(this, 
                    "El código de ese plan no fue encontrado");
            limpiarCamposMascota();
        } else {
            FechaPago.setText(pg.getFechaPago());
            NumeroCuotas.setText(String.valueOf(pg.getNumeroCuotas() ));
            MascotaBox.setSelectedIndex(ListaIdMascotas.indexOf(pg.getIdMascota()));
            PlanBox.setSelectedIndex(ListaIdPlanes.indexOf(pg.getIdPlan()));
        }
    }//GEN-LAST:event_ConsultarPagoButtonActionPerformed

    private void ModificarPagoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarPagoButtonActionPerformed
        // TODO add your handling code here:
        /*
        refpago
        */
        String idPago = IdPago.getText();
        String fechaPago = FechaPago.getText();
                //.getSelectedItem().toString();
        int numeroCuotas = Integer.parseInt(NumeroCuotas.getText());
        //int idMascota = MascotaBox.getSelectedIndex();
        //int idPlan = PlanBox.getSelectedIndex();
        int idMascota=Integer.valueOf(ListaIdMascotas.get(
                MascotaBox.getSelectedIndex()).toString());
        int idPlan=Integer.valueOf(ListaIdPlanes.get(
                PlanBox.getSelectedIndex()).toString());
        Pago pg = new Pago( fechaPago, numeroCuotas, idMascota, idPlan);
        //Mascota m = new Mascota(codigo, nombre, anio, peso, especie, idCliente);
        
        try{
            boolean respuesta = this.CtPago.actualizarPago(pg);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro actualizado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Registro no actualizado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "Debe buscar el registro para actualizar");
        }
        limpiarCamposPago();
    }//GEN-LAST:event_ModificarPagoButtonActionPerformed

    private void BorrarPagoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarPagoButtonActionPerformed
        // TODO add your handling code here:
        int idPago = Integer.parseInt(IdPago.getText());
        String fechaPago = "";
        int numeroCuotas = 0;
        int idMascota = 0;
        int idPlan = 0;
        Pago pg = new Pago( fechaPago, numeroCuotas, 
                idMascota, idPlan );
        pg.setIdPago(idPago);
        
        try{
            boolean respuesta = CtPago.borrarPago(pg);
            if (respuesta){
                JOptionPane.showMessageDialog(this, 
                        "Registro borrado correctamente");
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Registro no borrado");
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarCamposPago();
    }//GEN-LAST:event_BorrarPagoButtonActionPerformed

    private void LimpiarPagoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarPagoButtonActionPerformed
        // TODO add your handling code here:
        limpiarCamposPago();
    }//GEN-LAST:event_LimpiarPagoButtonActionPerformed

    private void ActualizarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarReporteActionPerformed
        // TODO add your handling code here:
        ArrayList<Registro> ListaRegistros = CtPago.ListarRegistros();
        Registro registro = null;
        String[] fila= {"", "", "", "", ""};
        // limpiar tabla
        while(ReporteTabla.getRowCount() > 0) 
        {
            ((DefaultTableModel) ReporteTabla.getModel()).removeRow(0);
        }
                 
        //Vector<Vector<Object>> data = new Vector<Vector<Object>>(); 
        for(int k=0; k < ListaRegistros.size();k++) {
        //for (Iterator<Registro> it = ListaRegistros.iterator(); it.hasNext();) {
            //registro = it.next();
            registro = ListaRegistros.get(k);
            fila[0] = registro.getFechaPago();
            fila[1] = "" + registro.getNumeroCuotas();
            fila[2] = registro.getCodigoMascota();
            fila[3] = registro.getCodigoPlan();
            fila[4] = registro.getIdentificacionCliente();
            //fila.add(ListaRegistros.get(j);
            ((DefaultTableModel) ReporteTabla.getModel()).insertRow(k,fila);
            
        } //(DefaultTableModel) ReporteTabla.setModel(ListaRegistros);
        
    }//GEN-LAST:event_ActualizarReporteActionPerformed

    private void ExportarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportarReporteActionPerformed
        // TODO add your handling code here:        
        HSSFWorkbook book = new HSSFWorkbook();
        HSSFSheet sheet = book.createSheet();
        book.setSheetName(0, "Pagos relacionados");
        
        String[] headers = new String[]{
            "Fecha de pago",
            "Número de cuotas",
            "Mascota",
            "Plan",
            "Cliente"
        };
        
        CellStyle headerCellStyle = book.createCellStyle();
        HSSFFont font = book.createFont();
        font.setBold(true);
        headerCellStyle.setFont(font);
        
        HSSFRow headerRow = sheet.createRow(0);
        
        for (int i = 0;i < headers.length;i++){
            String header = headers[i];
            HSSFCell cell = headerRow.createCell(i);
            cell.setCellStyle(headerCellStyle);
            cell.setCellValue(header);
        }
        
        for (int i = 0; i < ReporteTabla.getModel().getRowCount();i++){
            HSSFRow row = sheet.createRow(i+1);
            for(int j = 0; j<ReporteTabla.getModel().getColumnCount(); j++){
                Object tmp;
                tmp = ReporteTabla.getModel().getValueAt(i, j);
                row.createCell(j).setCellValue(tmp.toString());
            }
        }
        try {
            FileOutputStream file = new FileOutputStream("PagosRelacionados.xls");
            try {
                book.write(file);
                file.close();
            } catch (IOException ex) {
                Logger.getLogger(VistaGlobal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VistaGlobal.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_ExportarReporteActionPerformed

    private void limpiarCamposPlan() {
        CodigoPlan.setText("");
        NombrePlan.setSelectedIndex(0);
        PrecioPlan.setText("");
    }

    private void limpiarCamposCliente() {
        IdentificacionCliente.setText("");
        NombresCliente.setText("");
        ApellidosCliente.setText("");
        DireccionCliente.setText("");
        TelefonoCliente.setText("");
    }

    private void limpiarCamposMascota(){
        CodigoMascota.setText("");
        NombreMascota.setText("");
        AnioNace.setText("");
        Peso.setText("");        
        Especie.setSelectedIndex(0);
        SetListaClientes();
        ClienteBox.setSelectedIndex(0);
    }

    private void limpiarCamposPago(){
        FechaPago.setText("aaaa/mm/dd");
        NumeroCuotas.setText("");
        SetListaMascotas();
        SetListaPlanes();
        MascotaBox.setSelectedIndex(0);
        PlanBox.setSelectedIndex(0);
    }

    private void SetListaClientes(){
        ClienteBox.removeAllItems();
        ListaIdClientes.clear();
        ArrayList<Cliente> Clientes = CtCliente.ListarClientes();
        Cliente c ;
        for (int i = 0; i < Clientes.size(); i++){
            c = Clientes.get(i);
            ClienteBox.addItem(""+ c.getIdentificacion() + ", " + c.getNombres() 
                    + " " + c.getApellidos());
            ListaIdClientes.add(i ,c.getIdCliente() );
        }
    }

    private void SetListaPlanes(){
        PlanBox.removeAllItems();
        ListaIdPlanes.clear();
        ArrayList<Plan> Planes = CtPlan.ListarPlanes();
        Plan pl ;
        for (int i = 0; i < Planes.size(); i++){
            pl = Planes.get(i);
            PlanBox.addItem(""+ pl.getCodigo() + ", " + pl.getNombre() 
                    + " " + pl.getPrecio());
            ListaIdPlanes.add(i ,pl.getIdPlan() );
        }
    }

    private void SetListaMascotas(){
        MascotaBox.removeAllItems();
        ListaIdMascotas.clear();
        ArrayList<Mascota> Mascotas = CtMascota.ListarMascotas();
        Mascota m ;
        for (int i = 0; i < Mascotas.size(); i++){
            m = Mascotas.get(i);
            MascotaBox.addItem(""+ m.getCodigo() + ", " + m.getNombre() );
            ListaIdMascotas.add(i ,m.getIdMascota() );
        }    
    }

    private void UpdateGraph(){
        ArrayList<ParejaDatos> ConjuntoDatos = CtPago.ListarMascotasPorPlan();
        DefaultPieDataset dataset = new DefaultPieDataset();
        for (ParejaDatos dato : ConjuntoDatos) {
            dataset.setValue(dato.getClase(), dato.getCantidad());
        }
        JFreeChart chart = ChartFactory.createPieChart("Mascotas por Plan", dataset, true, true, true);
        ChartPanel panel = new ChartPanel(chart);
        panel.setMouseWheelEnabled(true);
        DistribucionPlanes.setLayout(new java.awt.BorderLayout());
        //DistribucionPlanes.setSize(500, 300);
        DistribucionPlanes.add(panel, BorderLayout.CENTER);
        DistribucionPlanes.validate();
    }
    
    /*
    private void recargarComboBoxCliente(){
        cbCliente.removeAllItems();        
        this.clienteComboBox = CtCliente.listarTodosClientes();
        int contador = 0;
        while(contador < clienteComboBox.size()){            
            String tempNombre;
            tempNombre = clienteComboBox.get(contador).getIdPk()
                    + " " + clienteComboBox.get(contador).getidentificacion()
                    + " " + clienteComboBox.get(contador).getNombres() 
                    + " " + clienteComboBox.get(contador).getApellidos();
            cbCliente.addItem(tempNombre);
            contador = contador+1;
        }
    }
    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaGlobal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaGlobal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarReporte;
    private javax.swing.JTextField AnioNace;
    private javax.swing.JTextField ApellidosCliente;
    private javax.swing.JLabel ApellidosLabel;
    private javax.swing.JButton BorrarClienteButton;
    private javax.swing.JButton BorrarMascotaButton;
    private javax.swing.JButton BorrarPagoButton;
    private javax.swing.JButton BorrarPlanButton;
    private javax.swing.JComboBox<String> ClienteBox;
    private javax.swing.JPanel ClientePanel;
    private javax.swing.JLabel CodigoLabel;
    private javax.swing.JTextField CodigoMascota;
    private javax.swing.JTextField CodigoPlan;
    private javax.swing.JButton ConsultarClienteButton;
    private javax.swing.JButton ConsultarMascotaButton;
    private javax.swing.JButton ConsultarPagoButton;
    private javax.swing.JButton ConsultarPlanButton;
    private javax.swing.JButton CrearClienteButton;
    private javax.swing.JButton CrearMascotaButton;
    private javax.swing.JButton CrearPagoButton;
    private javax.swing.JButton CrearPlanButton;
    private javax.swing.JTextField DireccionCliente;
    private javax.swing.JLabel DireccionLabel;
    private javax.swing.JPanel DistribucionPlanes;
    private javax.swing.JComboBox<String> Especie;
    private javax.swing.JButton ExportarReporte;
    private javax.swing.JFormattedTextField FechaPago;
    private javax.swing.JTextField IdPago;
    private javax.swing.JTextField IdentificacionCliente;
    private javax.swing.JLabel IdentificacionLabel;
    private javax.swing.JButton LimpiarClienteButton;
    private javax.swing.JButton LimpiarMascotaButton;
    private javax.swing.JButton LimpiarPagoButton;
    private javax.swing.JButton LimpiarPlanButton;
    private javax.swing.JComboBox<String> MascotaBox;
    private javax.swing.JPanel MascotaPanel;
    private javax.swing.JButton ModificarClienteButton;
    private javax.swing.JButton ModificarMascotaButton;
    private javax.swing.JButton ModificarPagoButton;
    private javax.swing.JButton ModificarPlanButton;
    private javax.swing.JLabel NombreLabel;
    private javax.swing.JTextField NombreMascota;
    private javax.swing.JComboBox<String> NombrePlan;
    private javax.swing.JTextField NombresCliente;
    private javax.swing.JLabel NombresLabel;
    private javax.swing.JTextField NumeroCuotas;
    private javax.swing.JPanel Pagos;
    private javax.swing.JTabbedPane Panel;
    private javax.swing.JTextField Peso;
    private javax.swing.JComboBox<String> PlanBox;
    private javax.swing.JPanel PlanPanel;
    private javax.swing.JLabel PrecioLabel;
    private javax.swing.JTextField PrecioPlan;
    private javax.swing.JPanel Reporte;
    private javax.swing.JTable ReporteTabla;
    private javax.swing.JScrollPane ScrollReporte;
    private javax.swing.JTextField TelefonoCliente;
    private javax.swing.JLabel TelefonoLabel;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
